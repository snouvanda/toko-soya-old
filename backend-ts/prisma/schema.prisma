// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// to sync schema:> npx prisma migrate dev --name <migration-name>

// list of update history listed at the end of this file

// to update Prisma.Client:> npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// AUTH TABLES

model Users {
  id            String    @id @default(uuid()) @db.VarChar(50)
  email         String    @unique @db.VarChar(100)
  name          String    @db.VarChar(50)
  phone         String?   @db.VarChar(50)
  requestedRole Int       @default(4) // ref: enum UserRole
  role          Int       @default(4) // ref: enum UserRole
  isActive      Boolean   @default(false)
  regApproval   Int       @default(1) // ref: enum UserApproval
  salt          String?   @db.VarChar(100)
  password      String    @db.VarChar(100)
  remarks       String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  createdBy     String    @db.VarChar(50)
  updatedAt     DateTime? @updatedAt
  updatedBy     String?   @db.VarChar(50)
  deleted       DateTime?
  deletedBy     String?   @db.VarChar(50)

  Procurement1  Procurements[]       @relation("createdByUserId")
  Procurement2  Procurements[]       @relation("updatedByUserId")
  Procurement3  Procurements[]       @relation("deletedByUserId")
  Sales1        SalesOrders[]        @relation("createdByUserId")
  Sales2        SalesOrders[]        @relation("updatedByUserId")
  Sales3        SalesOrders[]        @relation("deletedByUserId")
  Customer      Customers[]          @relation("userId")
  Customer1     Customers[]          @relation("createdByUserId")
  Customer2     Customers[]          @relation("updatedByUserId")
  Customer3     Customers[]          @relation("deletedByUserId")
  Supplier      Suppliers[]          @relation("userId")
  Supplier1     Suppliers[]          @relation("createdByUserId")
  Supplier2     Suppliers[]          @relation("updatedByUserId")
  Supplier3     Suppliers[]          @relation("deletedByUserId")
  Product1      Products[]           @relation("createdByUserId")
  Product2      Products[]           @relation("updatedByUserId")
  Product3      Products[]           @relation("deletedByUserId")
  Shipper       Shippers[]           @relation("userId")
  Shipper1      Shippers[]           @relation("createdByUserId")
  Shipper2      Shippers[]           @relation("updatedByUserId")
  Shipper3      Shippers[]           @relation("deletedByUserId")
  Token         Tokens[]             @relation("userId")
  ProcReturn1   ProcurementReturns[] @relation("createdByUserId")
  ProcReturn2   ProcurementReturns[] @relation("updatedByUserId")
  ProcReturn3   ProcurementReturns[] @relation("deletedByUserId")
  SalesReturn1  SalesReturns[]       @relation("createdByUserId")
  SalesReturn2  SalesReturns[]       @relation("updatedByUserId")
  SalesReturn3  SalesReturns[]       @relation("deletedByUserId")
  Shipment1     Shipments[]          @relation("createdByUserId")
  Shipment2     Shipments[]          @relation("updatedByUserId")
  Shipment3     Shipments[]          @relation("deletedByUserId")
  StockAccount1 StockAccounts[]      @relation("createdByUserId")
  StockAccount2 StockAccounts[]      @relation("updatedByUserId")
  StockAccount3 StockAccounts[]      @relation("deletedByUserId")

  StockAdjustment1    StockAdjustments[]         @relation("createdByUserId")
  StockAdjustment2    StockAdjustments[]         @relation("updatedByUserId")
  StockAdjustment3    StockAdjustments[]         @relation("deletedByUserId")
  InvJournalLogical1  InventoryJournalLogical[]  @relation("createdByUserId")
  InvJournalLogical2  InventoryJournalLogical[]  @relation("updatedByUserId")
  InvJournalLogical3  InventoryJournalLogical[]  @relation("deletedByUserId")
  InvJournalPhysical1 InventoryJournalPhysical[] @relation("createdByUserId")
  InvJournalPhysical2 InventoryJournalPhysical[] @relation("updatedByUserId")
  InvJournalPhysical3 InventoryJournalPhysical[] @relation("deletedByUserId")

  @@index([id, email])
}

model Tokens {
  id           String   @id @default(uuid()) @db.VarChar(50)
  refreshToken String   @unique @db.VarChar(360)
  userId       String   @db.VarChar(50)
  createdAt    DateTime @default(now())

  User Users @relation("userId", fields: [userId], references: [id])

  @@index([refreshToken])
}

// MASTER TABLES

model Products {
  id        Int       @id @default(autoincrement())
  alias     String    @db.VarChar(10)
  name      String    @db.VarChar(50)
  remarks   String?   @db.VarChar(100)
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(50)
  deleted   DateTime?
  deletedBy String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Procurement        Procurements[]
  ProcReturn         ProcurementReturns[]
  SalesOrder         SalesOrders[]
  SalesReturn        SalesReturns[]
  Shipment           Shipments[]
  StockAdjustment    StockAdjustments[]
  InvJournalLogical  InventoryJournalLogical[]
  InvJournalPhysical InventoryJournalPhysical[]
}

model Customers {
  id          String    @unique @db.VarChar(10) // example: CUS001
  userId      String?   @db.VarChar(50)
  alias       String    @db.VarChar(25)
  fullname    String?   @db.VarChar(50)
  cusType     Int // ref: enum CustomerType
  companyName String?   @db.VarChar(50)
  email       String?   @db.VarChar(100)
  phone       String?   @db.VarChar(50)
  nik         String?   @db.VarChar(15)
  unloadPoint String?   @db.VarChar(50)
  remarks     String?   @db.VarChar(100)
  createdAt   DateTime  @default(now())
  createdBy   String    @db.VarChar(50)
  updatedAt   DateTime? @updatedAt
  updatedBy   String?   @db.VarChar(50)
  deleted     DateTime?
  deletedBy   String?   @db.VarChar(50)

  User  Users? @relation("userId", fields: [userId], references: [id])
  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  SalesOrder  SalesOrders[]
  SalesReturn SalesReturns[]
}

model Suppliers {
  id           String    @unique @db.VarChar(10) // example: SUP001
  userId       String?   @db.VarChar(50)
  alias        String    @db.VarChar(25)
  companyName  String    @db.VarChar(50)
  contactName  String?   @db.VarChar(50)
  contactPhone String?   @db.VarChar(50)
  contactEmail String?   @db.VarChar(100)
  remarks      String?   @db.VarChar(100)
  createdAt    DateTime  @default(now())
  createdBy    String    @db.VarChar(50)
  updatedAt    DateTime? @updatedAt
  updatedBy    String?   @db.VarChar(50)
  deleted      DateTime?
  deletedBy    String?   @db.VarChar(50)

  User  Users? @relation("userId", fields: [userId], references: [id])
  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Procurement Procurements[]
  ProcReturn  ProcurementReturns[]
}

model Shippers {
  id           String    @unique @db.VarChar(10) // example: SHP001
  userId       String?   @db.VarChar(50)
  alias        String    @db.VarChar(25)
  companyName  String    @db.VarChar(50)
  contactName  String?   @db.VarChar(50)
  contactPhone String?   @db.VarChar(50)
  contactEmail String?   @db.VarChar(100)
  remarks      String?   @db.VarChar(100)
  createdAt    DateTime  @default(now())
  createdBy    String    @db.VarChar(50)
  updatedAt    DateTime? @updatedAt
  updatedBy    String?   @db.VarChar(50)
  deleted      DateTime?
  deletedBy    String?   @db.VarChar(50)

  User  Users? @relation("userId", fields: [userId], references: [id])
  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Shipment Shipments[]
}

model StockAccounts {
  id        Int       @id @default(autoincrement())
  account   String    @unique @db.VarChar(20)
  remarks   String?   @db.VarChar(100)
  createdAt DateTime  @default(now())
  createdBy String    @db.VarChar(50)
  updatedAt DateTime? @updatedAt
  updatedBy String?   @db.VarChar(50)
  deleted   DateTime?
  deletedBy String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Procurement        Procurements[]
  ProcReturn         ProcurementReturns[]
  SalesOrder         SalesOrders[]
  SalesReturn        SalesReturns[]
  Shipments          Shipments[]
  StockAdjustment    StockAdjustments[]
  InvJournalLogical  InventoryJournalLogical[]
  InvJournalPhysical InventoryJournalPhysical[]
}

// OPERATIONS TABLES

model Procurements {
  id            Int       @id @default(autoincrement())
  trxDate       DateTime  @default(now())
  sqc           Int       @default(1)
  supplierId    String    @db.VarChar(10)
  transaction   Int       @default(1) // ref: enum ProcurementTrx
  productId     Int // ref: table Products.id
  quantity      Int
  unitPrice     Decimal
  account       Int // ref: table StockAccounts.id
  logicalStock  Int       @default(0)
  physicalStock Int       @default(0)
  loadStatus    Int       @default(0) // ref: enum ShipmentLoadStatus
  paymentStatus Int // ref: enum PaymentStatus
  paidAmount    Decimal
  paidMethod    Int // ref: enum PaymentMethod
  paidAmtBank   Decimal
  paidAmtCash   Decimal
  paidAmtAccRcv Decimal
  references    String?   @db.VarChar(50)
  remarks       String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  createdBy     String    @db.VarChar(50)
  updatedAt     DateTime? @updatedAt
  updatedBy     String?   @db.VarChar(50)
  deleted       DateTime?
  deletedBy     String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Supplier     Suppliers     @relation(fields: [supplierId], references: [id])
  Product      Products      @relation(fields: [productId], references: [id])
  StockAccount StockAccounts @relation(fields: [account], references: [id])

  ProcReturn ProcurementReturns[]
  Shipments  Shipments[]
}

model ProcurementReturns {
  id            Int       @id @default(autoincrement())
  trxDate       DateTime  @default(now())
  sqc           Int       @default(1)
  procurementId Int
  supplierId    String    @db.VarChar(10)
  productId     Int // ref: table Products.id
  quantity      Int
  unitPrice     Decimal
  account       Int // ref: table StockAccounts.id
  references    String?   @db.VarChar(50)
  remarks       String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  createdBy     String    @db.VarChar(50)
  updatedAt     DateTime? @updatedAt
  updatedBy     String?   @db.VarChar(50)
  deleted       DateTime?
  deletedBy     String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Supplier     Suppliers     @relation(fields: [supplierId], references: [id])
  Product      Products      @relation(fields: [productId], references: [id])
  StockAccount StockAccounts @relation(fields: [account], references: [id])
  Procurement  Procurements  @relation(fields: [procurementId], references: [id])
}

model SalesOrders {
  id            Int       @id @default(autoincrement())
  trxDate       DateTime  @default(now())
  sqc           Int       @default(1)
  customerId    String    @db.VarChar(10)
  account       Int // ref: table StockAccounts.id
  productId     Int // ref: table Products.id
  quantity      Int
  unitPrice     Decimal
  loadStatus    Int       @default(0) // ref: enum ShipmentLoadStatus
  paymentStatus Int // ref: enum PaymentStatus
  dueDate       DateTime? @db.Date
  paidAmount    Decimal
  paidMethod    Int // ref: enum PaymentMethod
  paidAmtBank   Decimal
  paidAmtCash   Decimal
  paidAmtAccRcv Decimal
  references    String?   @db.VarChar(50)
  remarks       String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  createdBy     String    @db.VarChar(50)
  updatedAt     DateTime? @updatedAt
  updatedBy     String?   @db.VarChar(50)
  deleted       DateTime?
  deletedBy     String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Customer     Customers      @relation(fields: [customerId], references: [id])
  Product      Products       @relation(fields: [productId], references: [id])
  StockAccount StockAccounts  @relation(fields: [account], references: [id])
  SalesReturn  SalesReturns[]
  Shipments    Shipments[]
}

model SalesReturns {
  id           Int       @id @default(autoincrement())
  trxDate      DateTime  @default(now())
  sqc          Int       @default(1)
  salesOrderId Int
  customerId   String    @db.VarChar(10)
  account      Int // ref: table StockAccounts.id
  productId    Int // ref: table Products.id
  quantity     Int
  unitPrice    Decimal
  references   String?   @db.VarChar(50)
  remarks      String?   @db.VarChar(100)
  createdAt    DateTime  @default(now())
  createdBy    String    @db.VarChar(50)
  updatedAt    DateTime? @updatedAt
  updatedBy    String?   @db.VarChar(50)
  deleted      DateTime?
  deletedBy    String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Customer     Customers     @relation(fields: [customerId], references: [id])
  Product      Products      @relation(fields: [productId], references: [id])
  StockAccount StockAccounts @relation(fields: [account], references: [id])
  SalesOrder   SalesOrders   @relation(fields: [salesOrderId], references: [id])
}

model Shipments {
  id            Int       @id @default(autoincrement())
  trxDate       DateTime  @default(now())
  sqc           Int       @default(1)
  shipperId     String    @db.VarChar(10)
  reg_plate     String    @db.VarChar(15)
  account       Int // ref: table StockAccounts.id
  procurementId Int
  salesOrderId  Int
  productId     Int // ref: table Products.id
  quantity      Int
  billTo        Int // ref: enum ShippingBillTo
  references    String?   @db.VarChar(50)
  remarks       String?   @db.VarChar(100)
  createdAt     DateTime  @default(now())
  createdBy     String    @db.VarChar(50)
  updatedAt     DateTime? @updatedAt
  updatedBy     String?   @db.VarChar(50)
  deleted       DateTime?
  deletedBy     String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Shipper      Shippers      @relation(fields: [shipperId], references: [id])
  StockAccount StockAccounts @relation(fields: [account], references: [id])
  Procurement  Procurements  @relation(fields: [procurementId], references: [id])
  SalesOrder   SalesOrders   @relation(fields: [salesOrderId], references: [id])
  Product      Products      @relation(fields: [productId], references: [id])
}

model StockAdjustments {
  id          Int       @id @default(autoincrement())
  trxDate     DateTime  @default(now())
  sqc         Int       @default(1)
  transaction Int       @default(1) // ref: enum StockAdjustmentTrx
  account     Int // ref: table StockAccounts.id
  productId   Int // ref: table Products.id
  quantity    Int
  unitPrice   Decimal
  references  String?   @db.VarChar(50)
  remarks     String?   @db.VarChar(100)
  createdAt   DateTime  @default(now())
  createdBy   String    @db.VarChar(50)
  updatedAt   DateTime? @updatedAt
  updatedBy   String?   @db.VarChar(50)
  deleted     DateTime?
  deletedBy   String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Product      Products      @relation(fields: [productId], references: [id])
  StockAccount StockAccounts @relation(fields: [account], references: [id])
}

model InventoryJournalLogical {
  id           Int       @id @default(autoincrement())
  trxDate      DateTime  @default(now())
  sqc          Int       @default(1)
  transaction  Int       @default(1) // ref: enum StockAdjustmentTrx
  account      Int // ref: table StockAccounts.id
  productId    Int // ref: table Products.id
  quantity     Int
  unitPrice    Decimal
  receivedFrom Int // ref: enum InventoryLogicalReceivedFrom
  receivedFKId Int
  issuedTo     Int // ref: enum InventoryLogicalIssuedTo
  issuedFKId   Int
  references   String?   @db.VarChar(50)
  remarks      String?   @db.VarChar(100)
  createdAt    DateTime  @default(now())
  createdBy    String    @db.VarChar(50)
  updatedAt    DateTime? @updatedAt
  updatedBy    String?   @db.VarChar(50)
  deleted      DateTime?
  deletedBy    String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Product Products @relation(fields: [productId], references: [id])

  StockAccount StockAccounts @relation(fields: [account], references: [id])
}

model InventoryJournalPhysical {
  id           Int       @id @default(autoincrement())
  trxDate      DateTime  @default(now())
  sqc          Int       @default(1)
  transaction  Int       @default(1) // ref: enum StockAdjustmentTrx
  account      Int // ref: table StockAccounts.id
  productId    Int // ref: table Products.id
  quantity     Int
  unitPrice    Decimal
  receivedFrom Int // ref: enum InventoryPhysicalReceivedFrom
  receivedFKId Int
  issuedTo     Int // ref: enum InventoryPhysicalIssuedTo
  issuedFKId   Int
  references   String?   @db.VarChar(50)
  remarks      String?   @db.VarChar(100)
  createdAt    DateTime  @default(now())
  createdBy    String    @db.VarChar(50)
  updatedAt    DateTime? @updatedAt
  updatedBy    String?   @db.VarChar(50)
  deleted      DateTime?
  deletedBy    String?   @db.VarChar(50)

  User1 Users  @relation("createdByUserId", fields: [createdBy], references: [id])
  User2 Users? @relation("updatedByUserId", fields: [updatedBy], references: [id])
  User3 Users? @relation("deletedByUserId", fields: [deletedBy], references: [id])

  Product Products @relation(fields: [productId], references: [id])

  StockAccount StockAccounts @relation(fields: [account], references: [id])
}

// MIGRATION UPDATE HISTORY

// MigrationName: 
// At-----------: 
// Description--: 
// 

// MigrationName: remove-@db.Date-from-trxDate
// At-----------: 
// Description--: 
// remove @db.Date from trxDate from all tables with trxDate with it.
// Experienced error invalid default value for trxDate in other newer version
// of mysql. Have tried to change sql-mode but not working. This working here
// maybe because configuration by xampp.

// MigrationName: add-metafields-into-stockaccounts-table
// At-----------: 
// Description--: 
// add metafields into stockaccounts table

// MigrationName: Change-alias-at-master-tables
// At-----------: 20230601193748
// Description--: 
// Change alias fields in customers, suppliers, shippers tables.

// MigrationName: init-new-state
// At-----------: 20230528194452
// Description--: 
// restore all fields in tables

// MigrationName: Remove-all-fields-to-sequences-fields
// At-----------: 20230528192800
// Description--: 
// remove all fields in tables except id to sequence fields creation

// MigrationName: Remove-Enum-Create-Update-Transactions-Tables
// At-----------: 20230528181853
// Description--: 
// change fields with enum into Int, update Procurements table.
// create ProcurementReturns table.
// create SalesOrders table.
// create SalesReturns table.
// create Shipments table.
// create StockAdjustments table.
// create InventoryJournalLogical
// create InventoryJournalPhysical

// MigrationName: Add-Timestamp-Tokens-table
// At-----------: 20230513131506_add_timestamp_tokens_table
// Description--: 
// add createdAt to tokens table

// MigrationName: Resize-refreshToken-field
// At-----------: 20230513092842
// Description--: 
// resize refreshToken field → varchar(360)

// MigrationName: Edit-Tokens-table
// At-----------: 20230513082559
// Description--: 
// add id field in tokens table

// MigrationName: Move-refreshToken-to-Tokens-table
// At-----------: 20230512112143
// Description--: 
// delete refresToken field from users
// create Tokens table [refresToken @id @unique, userId]

// MigrationName: Add-userId-Add-Roles
// At-----------: 20230512052926
// Description--: 
// add deletedBy to users table in all tables
// add userId field in customers, shippers, suppliers and relation to users table
// add roles to enumRoles: shipper, supplier
// change all enum values to lowercase

// MigrationName: Edit-Users-RegistrationApproval
// At-----------: 20230508182756
// Description--: 
// add RegApproval in users table. default pending
// add enumApproval [approved, denied, pending]
// new user with pending approval can update registration in front page.
// approved user only can update registration in profile page.

// MigrationName: Edit-Users-phone
// At-----------: 20230508165210
// Description--: 
// add phone field in users table. Mandatory for admin, employee, customer role

// MigrationName: Edit-User-role
// At-----------: 20230508132047
// Description--: 
// add requestedRole fields in users table. Edit default to guest
// change enumRole from [ADMIN, USER] into [admin, customer, employee, guest]
